# -*- coding: utf-8 -*-
"""machine_learning_01

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1KFx2kY8GLG_4Cf0-qMOuOUgR2lItxo9I

**Aula 01**

A ideia desse primeiro projeto é usar o machine learning para diferenciar dois animais com características diferentes: um porco e um cachorro.
"""

#Será usada classificação binária: 0 = Cachorro e 1 = Porco (Classificação)
#Usaremos 3 caractéristica: (Features)

#  0 = Pelo Curto e 1 = Pelo Longo
#  0 = Perna Longa e 1 = Perna Curta
#  0 = não faz 'Au Au' e 1 = faz 'Au au'

porco1 = [0,1,0]
porco2 = [0,1,1]
porco3 = [1,1,0]

cachorro1 = [0,1,1]
cachorro2 = [1,0,1]
cachorro3 = [1,1,1]

treino_x = [porco1,porco2,porco3,cachorro1,cachorro2, cachorro3]
treino_y = [ 1,1,1,0,0,0] #labels

#importando a biblioteca que será usada
from sklearn.svm import LinearSVC

#estanciando o LinearSVC
model = LinearSVC()

#treinando o modelo
model.fit(treino_x,treino_y)

#verificando a previsão do modelo ( 0 = cachorro ,  1 = porco)

animal_misterioso = [1,1,1]
model.predict([animal_misterioso])

#verificando a previsão do modelo ( 0 = cachorro ,  1 = porco)

misterio1 = [1,1,1]
misterio2 = [1,1,0]
misterio3 = [0,1,1]

teste_x = [misterio1,misterio2,misterio3]
teste_y = [0,1,1] #o resultado real do misterio1, misterio2 e misterio3 é [0,1,1]

previsoes = model.predict(teste_x)

#comparação dos resultados previstos com o resultado real
previsoes == teste_y

#Taxa de Acerto

corretos = (previsoes == teste_y).sum() #numero de corretos (verdadeiro)
total = len(teste_y)
taxa_de_acerto = corretos/total
print('Taxa de Acertos: %.2f'%(taxa_de_acerto*100), '%')

"""Calculando a taxa de acerto usando o sklearn - accuracy_score"""

from sklearn.metrics import accuracy_score

taxa_de_acerto = accuracy_score(teste_y,previsoes)
print('Taxa de Acertos: %.2f'%(taxa_de_acerto*100), '%')

"""## **Projeto 2 - Classificação**
--- 
Utilizando uma nova fonte de dados

"""

import pandas as pd
uri = 'https://gist.githubusercontent.com/guilhermesilveira/2d2efa37d66b6c84a722ea627a897ced/raw/10968b997d885cbded1c92938c7a9912ba41c615/tracking.csv'
dados = pd.read_csv(uri)

mapa = { 
    'home':'principal',
    'how_it_works':'como_funciona',
    'contact': 'contato',
    'bought': 'comprado'}

dados = dados.rename(columns = mapa)

x = dados[['principal','como_funciona','contato']]
y = dados['comprado']

"""Separando o treino do teste"""

dados.shape

#iremos separar 75% dos dados para treinar o algoritimo
treino_x = x[:75]
treino_y = y[:75]
teste_x = x[75:]
teste_y = y[75:]

print('Treinaremos com %d elementos e testaremos com %d elementos' %(len(treino_x),len(teste_x)))

modelo = LinearSVC()
modelo.fit(treino_x,treino_y)
previsoes = modelo.predict(teste_x)

acuracia = accuracy_score(teste_y,previsoes) * 100

print('Taxa de Acertos: %.2f'%(acuracia), '%')

"""**Usando a biblioteca para separar treino e teste**"""

from sklearn.model_selection import train_test_split

SEED = 20

treino_x, teste_x,treino_y, teste_y = train_test_split(x,y,
                                                       random_state = SEED, 
                                                       stratify = y, # para que a proporção dos que compraram e não compraram sejam semelhantes (comparaveis)
                                                       test_size =0.25)

modelo = LinearSVC()
modelo.fit(treino_x,treino_y)
previsoes = modelo.predict(teste_x)
acuracia = accuracy_score(teste_y,previsoes) * 100

print('Taxa de Acertos: %.2f'%(acuracia), '%')